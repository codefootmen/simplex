{"version":3,"sources":["components/SimplexTable.jsx","components/InputTable.jsx","Utils/Simplex.js","container/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["SimplexTable","pace","this","props","cells","length","rows","isBordered","isStriped","isNarrow","columns","map","x","i","current","print","z","push","Component","InputTable","state","handleChange","bind","e","handler","target","getAttribute","value","numberOfVariables","numberOfRestrictions","id","j","cell","type","onChange","firstRow","Simplex","column","tableSimplex","step","pp","tableTemp","pop","forEach","temp","min","Math","apply","f_objetiva","table","tam","iterations","columnFocus","lineFocus","selectColumn","calcPP","alert","celFocus","round","console","log","valueFocus","solveSimplex","numVariables","restricoes","numFolgas","numArtificiais","parseInt","countInFolgas","countInArt","Array","zLinha","linhasArtificiais","sumArt","output","firstStepTable","finalTable","a","slice","b","output2","result","isMultiplasSolucoes","isDegenerescencia","coeficiente","count","includes","Home","simplex","getColumns","getRows","organizeData","r","Number","setState","objFn","restrictions","cont","twoSteps","tables","_","flat","className","isSize","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAyCeA,E,iLArCH,IAAD,OACHC,EAAOC,KAAKC,MAAMC,MAAMC,OAASH,KAAKC,MAAMG,KAAKD,OAErD,OACE,kBAAC,QAAD,CAAOE,YAAU,EAACC,WAAS,EAACC,UAAQ,GAClC,+BACE,4BACE,6BACCP,KAAKC,MAAMO,QAAQC,KAAI,SAAAC,GAAC,OACvB,4BAAKA,QAIX,+BACGV,KAAKC,MAAMG,KAAKK,KAAI,SAACC,EAAGC,GACvB,IAAIC,EAAUD,EACdA,GAAQ,EACRA,GAAQZ,EAER,IADA,IAAIc,EAAQ,GACHC,EAAIF,EAAUb,EAAMe,EAAIH,EAAGG,IAClCD,EAAME,KAAK,EAAKd,MAAMC,MAAMY,IAE9B,OACE,4BACE,4BAAKJ,GACJG,EAAMJ,KAAI,SAAAC,GAAC,OACV,4BAAKA,gB,GA3BIM,a,QC4EZC,E,YA3Eb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDiB,MAAQ,GACb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAJH,E,0EAONC,GACXrB,KAAKC,MAAMqB,QAAX,eACGD,EAAEE,OAAOC,aAAa,QAAUH,EAAEE,OAAOE,U,+BAU5C,IAJA,IAAIC,EAAoB,GACpBC,EAAuB,GAEvBC,EAAK,EACAC,EAAI,EAAGA,EAAI7B,KAAKC,MAAMO,QAASqB,IACtCH,EAAkBG,GAChB,4BACE,kBAAC,QAAD,CAAOC,KAAMF,EAAIG,KAAK,SAASC,SAAUhC,KAAKmB,eADhD,KAEGU,EAAI,GAGTD,IAKF,IAFA,IAAIK,EAAQ,UAAOP,GAEVf,EAAI,EAAGA,EAAIX,KAAKC,MAAMG,KAAMO,IAAK,CACxC,IAAK,IAAIkB,EAAI,EAAGA,EAAI7B,KAAKC,MAAMO,QAASqB,IACtCH,EAAkBG,GAChB,4BACE,kBAAC,QAAD,CAAOC,KAAMF,EAAIG,KAAK,SAASC,SAAUhC,KAAKmB,eADhD,KAEGU,EAAI,GAGTD,IAGFD,EAAqBhB,GACnB,4BACE,gCAAMA,EAAI,GADZ,UAEOe,GACL,4BACE,kBAAC,SAAD,CAAQI,KAAMF,IAAMI,SAAUhC,KAAKmB,cACjC,4BAAQM,MAAM,MAAM,MACpB,4BAAQA,MAAM,MAAM,MACpB,4BAAQA,MAAM,KAAK,OAGvB,4BACE,kBAAC,QAAD,CAAOK,KAAMF,IAAMG,KAAK,SAASC,SAAUhC,KAAKmB,eAAiB,MAMzE,OACE,kBAAC,QAAD,CAAOd,YAAU,EAACC,WAAS,EAACC,UAAQ,GAClC,+BACE,4BACE,wCACC0B,EACD,iCACA,mCAGJ,+BAAQN,Q,GAvESX,a,OCgRVkB,E,+FAlRNC,EAAQC,EAAcC,GAC3B,IAAIC,EAAK,GACLC,EAAS,YAAOH,GACpBG,EAAUC,MACG,IAATH,GACFE,EAAUC,MAEZD,EAAUE,SAAQ,SAAA/B,GAChB,GAAkB,IAAdA,EAAEyB,GAAe,CACnB,IAAIO,EAAOhC,EAAEA,EAAEP,OAAS,GAAKO,EAAEyB,GAC3BO,GAAQ,EAAGJ,EAAGvB,KAAK2B,GAClBJ,EAAGvB,KAAK,WAEbuB,EAAGvB,KAAK,SAIZ,IAAI4B,EAAMC,KAAKD,IAAIE,MAAM,KAAMP,GAE/B,GAAY,OAARK,EACF,OAAQ,EAGV,IAAK,IAAIhC,EAAI,EAAGA,EAAI2B,EAAGnC,OAAQQ,IAC7B,GAAIgC,IAAQL,EAAG3B,GACb,OAAOA,I,mCAKAmC,GACX,IAAIhC,EAAC,YAAOgC,GACZhC,EAAE0B,MACF,IAAIG,EAAMC,KAAKD,IAAIE,MAAM,KAAM/B,GAE/B,GAAI6B,EAAM,EACR,IAAK,IAAIhC,EAAI,EAAGA,EAAIG,EAAEX,OAAQQ,IAC5B,GAAIgC,IAAQ7B,EAAEH,GACZ,OAAOA,I,mCAMFoC,EAAOC,EAAKX,EAAMY,GAC7B,IAAIC,EACAC,EAAY,EACZrC,EAAC,YAAOiC,EAAMA,EAAM5C,OAAS,IAGjC,GAFY,IAAR6C,GAAWlC,EAAE0B,MAEbI,KAAKD,IAAIE,MAAM,KAAM/B,IAAM,EAC7B,OAA0B,IAAtBmC,EAAW9C,OACN4C,EAEFE,EAST,IANAC,EAAclD,KAAKoD,aAAatC,KAEb,IACjBqC,EAAYnD,KAAKqD,OAAOH,EAAaH,EAAOV,KAG3B,IAAfc,EAEF,OADAG,MAAM,6BACCL,EAOT,IAJA,IAAIM,EAAWR,EAAMI,GAAWD,GAIvBvC,EAAI,EAAGA,EAAIoC,EAAMI,GAAWhD,OAAQQ,IAC1B,IAAb4C,IACFR,EAAMI,GAAWxC,GACfiC,KAAKY,MAAOT,EAAMI,GAAWxC,GAAK4C,EAAY,KAAO,KAG3DN,EAAWlC,KAAKgC,EAAMtC,KAAI,SAAAC,GAAC,OAAIA,EAAED,KAAI,SAAAC,GAAC,OAAIA,SAC1C+C,QAAQC,IAAIX,GAGZ,IAAK,IAAIpC,EAAI,EAAGA,EAAIoC,EAAM5C,OAAQQ,IAChC,GAAIA,IAAMwC,EAER,IADA,IAAIQ,EAAaZ,EAAMpC,GAAGuC,GACjBrB,EAAI,EAAGA,EAAIkB,EAAMpC,GAAGR,OAAQ0B,IACnCkB,EAAMpC,GAAGkB,GAAKkB,EAAMpC,GAAGkB,GAAK8B,EAAaZ,EAAMI,GAAWtB,GAQhE,OAHA4B,QAAQC,IAAIX,GACZE,EAAWlC,KAAKgC,EAAMtC,KAAI,SAAAC,GAAC,OAAIA,EAAED,KAAI,SAAAC,GAAC,OAAIA,SAC1CsC,IACOhD,KAAK4D,aAAab,EAAOC,EAAKX,EAAMY,K,+BAGpCY,EAAcC,EAAYhB,GACjC,IAAIiB,EAAY,EACZC,EAAiB,EAErBH,EAAeI,SAASJ,GAExB,IAAId,EAAQ,GACRmB,EAAgB,EAChBC,EAAa,EAEjBV,QAAQC,IAAI,eAAiBI,GAC7BA,EAAWrB,SAAQ,SAAA/B,GACjB,OAAQA,EAAEmD,IACR,IAAK,KACHE,IACA,MAEF,IAAK,IACHC,IACA,MAEF,IAAK,KACHD,IACAC,IACA,MAEF,QACEV,MAAM,oCAKZQ,EAAWrB,SAAQ,SAAA/B,GAGjB,IAFA,IAAIgC,EAAO,IAAI0B,MAAMP,EAAeE,EAAYC,EAAiB,GAExDrD,EAAI,EAAGA,EAAI+B,EAAKvC,OAAQQ,IAC/B+B,EAAK/B,GAAK,EAGZ,IAAK,IAAIkB,EAAI,EAAGA,EAAIgC,EAAchC,IAChCa,EAAKb,GAAKoC,SAASvD,EAAEmB,IAGvB,OAAQnB,EAAEmD,IACR,IAAK,KACHnB,EAAKmB,EAAeK,GAAiB,EACrCA,IACA,MAEF,IAAK,IACHxB,EAAKmB,EAAeE,EAAYI,GAAc,EAC9CA,IACA,MAEF,IAAK,KACHzB,EAAKmB,EAAeK,IAAkB,EACtCxB,EAAKmB,EAAeE,EAAYI,GAAc,EAC9CA,IACAD,IACA,MAEF,QACEZ,MAAM,gCAGVZ,EAAKA,EAAKvC,OAAS,GAAK8D,SAASvD,EAAEA,EAAEP,OAAS,IAE9C4C,EAAMhC,KAAK2B,MAGbe,QAAQC,IAAIX,GAKZ,IAFA,IAAIjC,EAAI,IAAIsD,MAAMP,EAAeE,EAAYC,EAAiB,GAErDrD,EAAI,EAAGA,EAAIG,EAAEX,OAAQQ,IAC5BG,EAAEH,GAAK,EAGT,IAAK,IAAIA,EAAI,EAAGA,EAAImC,EAAW3C,OAAQQ,IACjCA,EAAImC,EAAW3C,OAAS,EAAGW,EAAEH,GAAKsD,SAASnB,EAAWnC,IACrDG,EAAEA,EAAEX,OAAS,GAAK8D,SAASnB,EAAWnC,IAG7CoC,EAAMhC,KAAKD,GAKX,IAFA,IAAIuD,EAAS,IAAID,MAAMP,EAAeE,EAAYC,EAAiB,GAE1DrD,EAAI,EAAGA,EAAI0D,EAAOlE,OAAQQ,IACjC0D,EAAO1D,GAAK,EAKd,IAFA,IAAI2D,EAAoB,GAEf3D,EAAI,EAAGA,EAAIoC,EAAM5C,OAAS,EAAGQ,IACpC,IAAK,IAAIkB,EAAI,EAAGA,EAAImC,EAAgBnC,IACa,IAA3CkB,EAAMpC,GAAGkD,EAAeE,EAAYlC,IACtCyC,EAAkBvD,KAAKJ,GAK7B,IAvG6C,eAuGpCA,GACP,IAAI4D,EAAS,EACbD,EAAkB7B,SAAQ,SAAA/B,GACxB6D,GAAUxB,EAAMrC,GAAGC,MAEN,IAAX4D,IAAcF,EAAO1D,IAAe,EAAV4D,IALvB5D,EAAI,EAAGA,EAAIkD,EAAeE,EAAWpD,IAAM,EAA3CA,GAQT,IAAI4D,EAAS,EACbD,EAAkB7B,SAAQ,SAAA/B,GACxB6D,GAAUxB,EAAMrC,GAAGqC,EAAMrC,GAAGP,OAAS,MAEvCkE,EAAOA,EAAOlE,OAAS,IAAe,EAAVoE,EAE5BxB,EAAMhC,KAAKsD,GAEX,IAAIpB,EAAa,GAEbuB,EAASxE,KAAK4D,aAAab,EAAO,EAAG,EAAGE,GACxCwB,EAAiBD,EAAOA,EAAOrE,OAAS,GAE5CsE,EAAejC,MAGf,IADA,IAAIkC,EAAa,GACR/D,EAAI,EAAGA,EAAImD,EAAW3D,OAAS,EAAGQ,IAAK,CAAC,IAAD,IAC1CgE,EAAIF,EAAe9D,GAAGiE,MAAM,EAAGf,EAAeE,GAC9Cc,EAAIJ,EAAe9D,GAAGiE,MAAMH,EAAe9D,GAAGR,OAAS,GAC3DuE,EAAW/D,GAAK,IAChB,EAAA+D,EAAW/D,IAAGI,KAAd,oBAAsB4D,KACtB,EAAAD,EAAW/D,IAAGI,KAAd,oBAAsB8D,IAGxB5B,EAAa,GAEb,IAAI6B,EAAU9E,KAAK4D,aAAac,EAAY,EAAG,EAAGzB,GAC9C8B,EAASD,EAAQA,EAAQ3E,OAAS,GAUtC,OARIH,KAAKgF,oBAAoBlB,EAAYhB,IACvCQ,MAAM,uCAGJtD,KAAKiF,kBAAkBF,IACzBzB,MAAM,uBAERkB,EAAOzD,KAAK+D,GACLN,I,0CAGWV,EAAYhB,GAG9B,IAFA,IAAIoC,EAAcpB,EAAW,GAAG,GAAKhB,EAAW,GAEvCnC,EAAI,EAAGA,EAAImD,EAAW3D,OAAQQ,IAAK,CAE1C,IADA,IAAIwE,EAAQ,EACHtD,EAAI,EAAGA,EAAIiC,EAAWnD,GAAGR,OAAS,EAAG0B,IACxCiC,EAAWnD,GAAGkB,GAAKiB,EAAWjB,KAAOqD,GACvCC,IAIJ,GAAIA,IAAUrB,EAAWnD,GAAGR,OAAS,EACnC,OAAO,EAIX,OAAO,I,wCAGS4C,GAChB,IAAI8B,EAAI9B,EAAMtC,KAAI,SAAAC,GAAC,OAAIA,EAAEA,EAAEP,OAAS,MAEpC,OADA0E,EAAErC,MACKqC,EAAEO,SAAS,O,KC1GPC,E,YArJb,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KAEDiB,MAAQ,CACXoE,QAAS,IAAIpD,EACb1B,QAAS,EACTJ,KAAM,EACN2E,OAAQ,CAAC,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAAK,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,MAGtD,EAAKQ,WAAa,EAAKA,WAAWnE,KAAhB,gBAClB,EAAKoE,QAAU,EAAKA,QAAQpE,KAAb,gBACf,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKqE,aAAe,EAAKA,aAAarE,KAAlB,gBACpB,EAAKwC,aAAe,EAAKA,aAAaxC,KAAlB,gBAdH,E,iFAqBjB,IAJA,IAAIF,EAAQ,GACRP,EAAI,EACJkB,EAAI,EAEAlB,EAAIX,KAAKkB,MAAMV,QAASG,IAC9BO,EAAMP,GAAK,EAGb,IAAK,IAAI+E,EAAI,EAAGA,EAAI1F,KAAKkB,MAAMd,KAAMsF,IACnC,KAAQ7D,EAAI8D,OAAO3F,KAAKkB,MAAMV,SAAW,EAAGqB,IAC1CX,EAAMP,EAAIkB,GAAK,EACXA,IAAM8D,OAAO3F,KAAKkB,MAAMV,WAC1BU,EAAMP,EAAIkB,GAAK,MAKrB4B,QAAQC,IAAIxC,GACZlB,KAAK4F,SAAS1E,K,8BAGRA,GACNlB,KAAK4F,SAAS1E,K,8BAGRG,GACNrB,KAAK4F,SAAS,CAAExF,KAAMiB,EAAEE,OAAOE,U,iCAGtBJ,GACTrB,KAAK4F,SAAS,CAAEpF,QAASa,EAAEE,OAAOE,U,qCAIlCzB,KAAKyF,iB,qCAML,IAFA,IAAII,EAAQ,GAEHlF,EAAI,EAAGA,EAAIX,KAAKkB,MAAMV,QAASG,IACtCkF,EAAM9E,KAAKf,KAAKkB,MAAMP,IAExBkF,EAAM9E,KAAK,KAKX,IAHA,IAAI+E,EAAe,GACfC,EAAO/F,KAAKkB,MAAMV,QAEbqB,EAAI,EAAGA,EAAI7B,KAAKkB,MAAMd,KAAMyB,IAAK,CACxCiE,EAAajE,GAAK,GAClB,IAAK,IAAIf,EAAI,EAAGA,EAAImD,SAASjE,KAAKkB,MAAMV,SAAW,EAAGM,IACpDgF,EAAajE,GAAGd,KAAKf,KAAKkB,MAAM6E,IAChCA,IAIJ,IAAIvB,EAASxE,KAAKkB,MAAMoE,QAAQU,SAC9BhG,KAAKkB,MAAMV,QACXsF,EACAD,GAGF7F,KAAK4F,SAAS,CACZC,MAAOA,EACPC,aAAcA,EACdf,OAAQP,M,+BAMV,IADA,IAAIyB,EAAS,GACJtF,EAAI,EAAGA,EAAIX,KAAKkB,MAAM6D,OAAO5E,OAAQQ,IAC5CsF,EAAOtF,GACL,kBAAC,EAAD,CACEH,QAASR,KAAKkB,MAAM6D,OAAOpE,GAAG,GAAGF,KAAI,SAACyF,EAAGvF,GAAJ,MAAU,KAAOA,EAAI,MAC1DP,KAAMJ,KAAKkB,MAAM6D,OAAOpE,GAAGF,KAAI,SAACyF,EAAGvF,GAAJ,MAAU,KAAOA,EAAI,MACpDT,MAAOF,KAAKkB,MAAM6D,OAAOpE,GAAGwF,SAIlC,OACE,yBAAKC,UAAU,OACb,kBAAC,UAAD,KACE,kBAAC,SAAD,CAAQC,OAAQ,GACd,kBAAC,QAAD,gBACA,kBAAC,QAAD,KACE,kBAAC,QAAD,4BACA,kBAAC,UAAD,KACE,kBAAC,QAAD,CACEtE,KAAK,SACLN,MAAOzB,KAAKkB,MAAMV,QAClBwB,SAAUhC,KAAKuF,eAIrB,kBAAC,QAAD,KACE,kBAAC,QAAD,+BACA,kBAAC,UAAD,KACE,kBAAC,QAAD,CACExD,KAAK,SACLN,MAAOzB,KAAKkB,MAAMd,KAClB4B,SAAUhC,KAAKwF,aAKvB,kBAAC,SAAD,KACE,yBAAKY,UAAU,cACb,kBAAC,UAAD,KACE,kBAAC,SAAD,KACE,kBAAC,EAAD,CACE5F,QAASR,KAAKkB,MAAMV,QACpBJ,KAAMJ,KAAKkB,MAAMd,KACjBkB,QAAStB,KAAKsB,YAIpB,kBAAC,UAAD,KACE,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQgF,QAAStG,KAAK4D,cAAtB,QAGJ,kBAAC,UAAD,KACE,kBAAC,SAAD,KAASqC,Y,GA7INjF,aCLJuF,MANf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.adba283a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Table } from \"bloomer\";\n\nclass SimplexTable extends Component {\n  render() {\n    let pace = this.props.cells.length / this.props.rows.length;\n\n    return (\n      <Table isBordered isStriped isNarrow>\n        <thead>\n          <tr>\n            <th></th>\n            {this.props.columns.map(x => (\n              <th>{x}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.rows.map((x, i) => {\n            let current = i;\n            i = i + 1;\n            i = i * pace;\n            let print = [];\n            for (let z = current * pace; z < i; z++) {\n              print.push(this.props.cells[z]);\n            }\n            return (\n              <tr>\n                <th>{x}</th>\n                {print.map(x => (\n                  <td>{x}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default SimplexTable;\n","import React, { Component } from \"react\";\nimport { Table, Input, Select } from \"bloomer\";\n\nclass InputTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.handler({\n      [e.target.getAttribute(\"cell\")]: e.target.value\n    });\n  }\n\n  render() {\n    /*----------*/\n    let numberOfVariables = [];\n    let numberOfRestrictions = [];\n\n    let id = 0;\n    for (let j = 0; j < this.props.columns; j++) {\n      numberOfVariables[j] = (\n        <td>\n          <Input cell={id} type=\"number\" onChange={this.handleChange} /> x\n          {j + 1}\n        </td>\n      );\n      id++;\n    }\n\n    let firstRow = [...numberOfVariables];\n\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.columns; j++) {\n        numberOfVariables[j] = (\n          <td>\n            <Input cell={id} type=\"number\" onChange={this.handleChange} /> x\n            {j + 1}\n          </td>\n        );\n        id++;\n      }\n\n      numberOfRestrictions[i] = (\n        <tr>\n          <th>R{i + 1}</th>\n          {[...numberOfVariables]}\n          <td>\n            <Select cell={id++} onChange={this.handleChange}>\n              <option value=\"<=\">{\"<=\"}</option>\n              <option value=\">=\">{\">=\"}</option>\n              <option value=\"=\">{\"=\"}</option>\n            </Select>\n          </td>\n          <td>\n            <Input cell={id++} type=\"number\" onChange={this.handleChange} />{\" \"}\n          </td>\n        </tr>\n      );\n    }\n\n    return (\n      <Table isBordered isStriped isNarrow>\n        <thead>\n          <tr>\n            <th>Obj. Fn.</th>\n            {firstRow}\n            <td>=</td>\n            <td>Z</td>\n          </tr>\n        </thead>\n        <tbody>{numberOfRestrictions}</tbody>\n      </Table>\n    );\n  }\n}\nexport default InputTable;\n","class Simplex {\n  calcPP(column, tableSimplex, step) {\n    let pp = [];\n    let tableTemp = [...tableSimplex];\n    tableTemp.pop();\n    if (step === 1) {\n      tableTemp.pop();\n    }\n    tableTemp.forEach(x => {\n      if (x[column] !== 0) {\n        let temp = x[x.length - 1] / x[column];\n        if (temp >= 0) pp.push(temp);\n        else pp.push(9999);\n      } else {\n        pp.push(9999);\n      }\n    });\n\n    let min = Math.min.apply(null, pp);\n\n    if (min === 9999) {\n      return -1;\n    }\n\n    for (let i = 0; i < pp.length; i++) {\n      if (min === pp[i]) {\n        return i;\n      }\n    }\n  }\n\n  selectColumn(f_objetiva) {\n    let z = [...f_objetiva];\n    z.pop();\n    let min = Math.min.apply(null, z);\n\n    if (min < 0) {\n      for (let i = 0; i < z.length; i++) {\n        if (min === z[i]) {\n          return i;\n        }\n      }\n    }\n  }\n\n  solveSimplex(table, tam, step, iterations) {\n    let columnFocus;\n    let lineFocus = 0;\n    let z = [...table[table.length - 1]];\n    if (tam === 0) z.pop();\n\n    if (Math.min.apply(null, z) >= 0) {\n      if (iterations.length === 0) {\n        return table;\n      }\n      return iterations;\n    }\n\n    columnFocus = this.selectColumn(z);\n\n    if (columnFocus >= 0) {\n      lineFocus = this.calcPP(columnFocus, table, step);\n    }\n\n    if (lineFocus === -1) {\n      alert(\"Ótimo não finíto\");\n      return iterations;\n    }\n\n    let celFocus = table[lineFocus][columnFocus];\n\n    //divide a linha para transformar o foco em 1\n\n    for (let i = 0; i < table[lineFocus].length; i++) {\n      if (celFocus !== 0) {\n        table[lineFocus][i] =\n          Math.round((table[lineFocus][i] / celFocus) * 100) / 100;\n      }\n    }\n    iterations.push(table.map(x => x.map(x => x)));\n    console.log(table);\n\n    //Zerar a coluna\n    for (let i = 0; i < table.length; i++) {\n      if (i !== lineFocus) {\n        let valueFocus = table[i][columnFocus];\n        for (let j = 0; j < table[i].length; j++) {\n          table[i][j] = table[i][j] - valueFocus * table[lineFocus][j];\n        }\n      }\n    }\n\n    console.log(table);\n    iterations.push(table.map(x => x.map(x => x)));\n    tam++;\n    return this.solveSimplex(table, tam, step, iterations);\n  }\n\n  twoSteps(numVariables, restricoes, f_objetiva) {\n    let numFolgas = 0;\n    let numArtificiais = 0;\n\n    numVariables = parseInt(numVariables);\n\n    let table = [];\n    let countInFolgas = 0;\n    let countInArt = 0;\n\n    console.log(\"restricoes: \" + restricoes);\n    restricoes.forEach(x => {\n      switch (x[numVariables]) {\n        case \"<=\":\n          numFolgas++;\n          break;\n\n        case \"=\":\n          numArtificiais++;\n          break;\n\n        case \">=\":\n          numFolgas++;\n          numArtificiais++;\n          break;\n\n        default:\n          alert(\"restrição inválida!\");\n      }\n    });\n\n    //insere as restrições na tabela\n    restricoes.forEach(x => {\n      let temp = new Array(numVariables + numFolgas + numArtificiais + 1);\n\n      for (let i = 0; i < temp.length; i++) {\n        temp[i] = 0;\n      }\n\n      for (let j = 0; j < numVariables; j++) {\n        temp[j] = parseInt(x[j]);\n      }\n\n      switch (x[numVariables]) {\n        case \"<=\":\n          temp[numVariables + countInFolgas] = 1;\n          countInFolgas++;\n          break;\n\n        case \"=\":\n          temp[numVariables + numFolgas + countInArt] = 1;\n          countInArt++;\n          break;\n\n        case \">=\":\n          temp[numVariables + countInFolgas] = -1;\n          temp[numVariables + numFolgas + countInArt] = 1;\n          countInArt++;\n          countInFolgas++;\n          break;\n\n        default:\n          alert(\"restrição inválida!\");\n      }\n\n      temp[temp.length - 1] = parseInt(x[x.length - 1]);\n\n      table.push(temp);\n    });\n\n    console.log(table);\n\n    //insere a função objetiva (z) na tabela\n    let z = new Array(numVariables + numFolgas + numArtificiais + 1);\n\n    for (let i = 0; i < z.length; i++) {\n      z[i] = 0;\n    }\n\n    for (let i = 0; i < f_objetiva.length; i++) {\n      if (i < f_objetiva.length - 1) z[i] = parseInt(f_objetiva[i]);\n      else z[z.length - 1] = parseInt(f_objetiva[i]);\n    }\n\n    table.push(z);\n\n    //insere z' na tabela\n    let zLinha = new Array(numVariables + numFolgas + numArtificiais + 1);\n\n    for (let i = 0; i < zLinha.length; i++) {\n      zLinha[i] = 0;\n    }\n\n    let linhasArtificiais = [];\n\n    for (let i = 0; i < table.length - 1; i++) {\n      for (let j = 0; j < numArtificiais; j++) {\n        if (table[i][numVariables + numFolgas + j] === 1) {\n          linhasArtificiais.push(i);\n        }\n      }\n    }\n\n    for (let i = 0; i < numVariables + numFolgas; i++) {\n      let sumArt = 0;\n      linhasArtificiais.forEach(x => {\n        sumArt += table[x][i];\n      });\n      if (sumArt !== 0) zLinha[i] = sumArt * -1;\n    }\n\n    let sumArt = 0;\n    linhasArtificiais.forEach(x => {\n      sumArt += table[x][table[x].length - 1];\n    });\n    zLinha[zLinha.length - 1] = sumArt * -1;\n\n    table.push(zLinha);\n\n    let iterations = [];\n    // Resolve primeira fase do metodo e retorna a tabela resolvida\n    let output = this.solveSimplex(table, 0, 1, iterations);\n    let firstStepTable = output[output.length - 1];\n    // Limpar tabela, retirando zLinha e artificiais\n    firstStepTable.pop();\n\n    let finalTable = [];\n    for (let i = 0; i < restricoes.length + 1; i++) {\n      let a = firstStepTable[i].slice(0, numVariables + numFolgas);\n      let b = firstStepTable[i].slice(firstStepTable[i].length - 1);\n      finalTable[i] = [];\n      finalTable[i].push(...a);\n      finalTable[i].push(...b);\n    }\n\n    iterations = [];\n    // Resolve simplex simples\n    let output2 = this.solveSimplex(finalTable, 0, 2, iterations);\n    let result = output2[output2.length - 1];\n\n    if (this.isMultiplasSolucoes(restricoes, f_objetiva)) {\n      alert(\"Multiplas Soluções Ótimas!\");\n    }\n\n    if (this.isDegenerescencia(result)) {\n      alert(\"Degenerescência!\");\n    }\n    output.push(output2);\n    return output;\n  }\n\n  isMultiplasSolucoes(restricoes, f_objetiva) {\n    let coeficiente = restricoes[0][0] / f_objetiva[0];\n\n    for (let i = 0; i < restricoes.length; i++) {\n      let count = 0;\n      for (let j = 0; j < restricoes[i].length - 2; j++) {\n        if (restricoes[i][j] / f_objetiva[j] === coeficiente) {\n          count++;\n        }\n      }\n\n      if (count === restricoes[i].length - 2) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isDegenerescencia(table) {\n    let b = table.map(x => x[x.length - 1]);\n    b.pop();\n    return b.includes(0);\n  }\n}\n\nexport default Simplex;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Columns,\n  Column,\n  Title,\n  Field,\n  Label,\n  Control,\n  Input\n} from \"bloomer\";\nimport SimplexTable from \"../components/SimplexTable\";\nimport InputTable from \"../components/InputTable\";\nimport Simplex from \"../Utils/Simplex\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      simplex: new Simplex(),\n      columns: 2,\n      rows: 1,\n      result: [[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]]\n    };\n\n    this.getColumns = this.getColumns.bind(this);\n    this.getRows = this.getRows.bind(this);\n    this.handler = this.handler.bind(this);\n    this.organizeData = this.organizeData.bind(this);\n    this.solveSimplex = this.solveSimplex.bind(this);\n  }\n  componentDidMount() {\n    let state = {};\n    let i = 0;\n    let j = 0;\n\n    for (i; i < this.state.columns; i++) {\n      state[i] = 0;\n    }\n\n    for (let r = 0; r < this.state.rows; r++) {\n      for (j; j < Number(this.state.columns) + 2; j++) {\n        state[i + j] = 0;\n        if (j === Number(this.state.columns)) {\n          state[i + j] = \"<=\";\n        }\n      }\n    }\n\n    console.log(state);\n    this.setState(state);\n  }\n\n  handler(state) {\n    this.setState(state);\n  }\n\n  getRows(e) {\n    this.setState({ rows: e.target.value });\n  }\n\n  getColumns(e) {\n    this.setState({ columns: e.target.value });\n  }\n\n  solveSimplex() {\n    this.organizeData();\n  }\n\n  organizeData() {\n    let objFn = [];\n\n    for (let i = 0; i < this.state.columns; i++) {\n      objFn.push(this.state[i]);\n    }\n    objFn.push(\"0\");\n\n    let restrictions = [];\n    let cont = this.state.columns;\n\n    for (let j = 0; j < this.state.rows; j++) {\n      restrictions[j] = [];\n      for (let z = 0; z < parseInt(this.state.columns) + 2; z++) {\n        restrictions[j].push(this.state[cont]);\n        cont++;\n      }\n    }\n\n    let output = this.state.simplex.twoSteps(\n      this.state.columns,\n      restrictions,\n      objFn\n    );\n\n    this.setState({\n      objFn: objFn,\n      restrictions: restrictions,\n      result: output\n    });\n  }\n\n  render() {\n    let tables = [];\n    for (let i = 0; i < this.state.result.length; i++) {\n      tables[i] = (\n        <SimplexTable\n          columns={this.state.result[i][0].map((_, i) => \"x\" + (i + 1))}\n          rows={this.state.result[i].map((_, i) => \"R\" + (i + 1))}\n          cells={this.state.result[i].flat()}\n        />\n      );\n    }\n    return (\n      <div className=\"App\">\n        <Columns>\n          <Column isSize={3}>\n            <Title>Simplex</Title>\n            <Field>\n              <Label>Number of variables</Label>\n              <Control>\n                <Input\n                  type=\"number\"\n                  value={this.state.columns}\n                  onChange={this.getColumns}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Label>Number of Restrictions</Label>\n              <Control>\n                <Input\n                  type=\"number\"\n                  value={this.state.rows}\n                  onChange={this.getRows}\n                />\n              </Control>\n            </Field>\n          </Column>\n          <Column>\n            <div className=\"App-header\">\n              <Columns>\n                <Column>\n                  <InputTable\n                    columns={this.state.columns}\n                    rows={this.state.rows}\n                    handler={this.handler}\n                  />\n                </Column>\n              </Columns>\n              <Columns>\n                <Column>\n                  <Button onClick={this.solveSimplex}>Go</Button>\n                </Column>\n              </Columns>\n              <Columns>\n                <Column>{tables}</Column>\n              </Columns>\n            </div>\n          </Column>\n        </Columns>\n      </div>\n    );\n  }\n}\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from './container/Home'\n\nfunction App() {\n  return (\n      <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}