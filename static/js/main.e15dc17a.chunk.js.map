{"version":3,"sources":["components/inputTable.tsx","utils/vogel.ts","components/vogelResult.tsx","containers/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputTable","rows","columns","handler","r","c","count","Array","fill","map","x","i","j","onChange","e","id","target","value","prevState","type","placeholder","String","isBordered","isStriped","isNarrow","vogel","costs","List","necessity","availability","diff","n","reduce","y","a","difference","push","Math","abs","size","result","recurseVogel","isEmpty","get","penalties","rowPenality","colPenality","tmp","sort","b","minColVal","clear","penalty","rPenaltyIndex","indexOf","max","toArray","cPenaltyIndex","rowPenalty","popIndex","min","posValue","need","avaliable","minValue","set","delete","console","log","solveVogel","VogelResult","final","list","length","Home","useState","setColumns","setRows","matrix","setMatrix","vogelResult","setVogelResult","setFinal","className","isSize","Number","onClick","input","aval","nece","parseInt","steps","reduced","values","toJS","filter","pop","pos","forEach","p","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e15dc17a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table, Input, Select } from \"bloomer\";\r\n\r\nexport default function InputTable({\r\n  rows,\r\n  columns,\r\n  handler\r\n}: {\r\n  rows: number;\r\n  columns: number;\r\n  handler: Function;\r\n}) {\r\n  let r = [];\r\n  let c = [];\r\n  let count = 0;\r\n\r\n  r[0] = (\r\n    <tr>\r\n      <th></th>\r\n      {new Array(columns).fill(0).map((x, i) => (\r\n        <th>{\"T\" + (i + 1)}</th>\r\n      ))}\r\n      <th>Necessity</th>\r\n    </tr>\r\n  );\r\n\r\n  for (let i = 0; i < rows + 1; i++) {\r\n    for (let j = 0; j < columns; j++) {\r\n      c[j] = (\r\n        <td>\r\n          <Input\r\n            onChange={(e: any) => {\r\n              let id = e.target.id;\r\n              let value = e.target.value;\r\n              handler((prevState: any) => {\r\n                return { ...prevState, [id]: value };\r\n              });\r\n            }}\r\n            type=\"number\"\r\n            placeholder=\"0\"\r\n            id={String(count++)}\r\n          />\r\n        </td>\r\n      );\r\n    }\r\n    r[i + 1] = (\r\n      <tr>\r\n        {[\r\n          <th>{\"O\" + (i + 1)}</th>,\r\n          ...c,\r\n          <td>\r\n            <Input\r\n              onChange={(e: any) => {\r\n                let id = e.target.id;\r\n                let value = e.target.value;\r\n                handler((prevState: any) => {\r\n                  return { ...prevState, [id]: value };\r\n                });\r\n              }}\r\n              type=\"number\"\r\n              id={String(count++)}\r\n            />\r\n          </td>\r\n        ]}\r\n      </tr>\r\n    );\r\n    r[rows + 1] = <tr>{[<th>Availability</th>, ...c]}</tr>;\r\n    c = [];\r\n  }\r\n\r\n  return (\r\n    <Table isBordered isStriped isNarrow>\r\n      <thead>{/*  */}</thead>\r\n      <tbody>{r}</tbody>\r\n    </Table>\r\n  );\r\n}\r\n","import { List } from \"immutable\";\r\n\r\nexport default function vogel(\r\n  costs: List<List<number>> = List([]),\r\n  necessity: List<number> = List(),\r\n  availability: List<number> = List()\r\n) {\r\n  //// Exemplo 1\r\n\r\n  // costs = List([\r\n  //   List([15700, 12800, 17900]),\r\n  //   List([18500, 11200, 18200]),\r\n  //   List([21000, 17600, 19300])\r\n  // ]);\r\n\r\n  // necessity = List([46, 20, 19]);\r\n  // availability = List([42, 23, 28]);\r\n\r\n  //// Exemplo 2\r\n\r\n  // costs = List([\r\n  //   List([40600, 71400, 32200, 54600]),\r\n  //   List([73500, 66500, 43400, 60900]),\r\n  //   List([53200, 86800, 58100, 38500])\r\n  // ]);\r\n\r\n  // necessity = List([415, 660, 440]);\r\n  // availability = List([530, 240, 325, 420]);\r\n\r\n  //----------------------------//\r\n\r\n  let diff = difference(necessity, availability);\r\n  if (diff < 0) {\r\n    necessity = necessity.push(Math.abs(diff));\r\n    costs = costs.push(List(Array(availability.size).fill(999999)));\r\n  } else if (diff > 0) {\r\n    availability = availability.push(diff);\r\n    costs = List(costs.map(x => x.push(999999)));\r\n  }\r\n\r\n  let result: List<[]> = List(\r\n    solveVogel(costs, necessity, availability).toArray()\r\n  );\r\n  if (diff !== 0) {\r\n    result = result.delete(result.size - 1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/// Calc the difference between necessity and availability\r\nfunction difference(necessity: List<number>, availability: List<number>) {\r\n  let n = necessity.reduce((x, y) => x + y, 0);\r\n  let a = availability.reduce((x, y) => x + y, 0);\r\n  return n - a;\r\n}\r\n\r\n/// Calc the penalty for each row and column\r\nfunction penalty(costs: List<List<number>>) {\r\n  let rowPenality: List<number> = List();\r\n  let colPenality: List<number> = List();\r\n\r\n  costs.map(x => {\r\n    let tmp = x.sort((a, b) => a - b);\r\n    rowPenality = rowPenality.push(tmp.get(1)! - tmp.get(0)!);\r\n  });\r\n\r\n  let minColVal: List<number> = List();\r\n  for (let i = 0; i < costs.get(0)!.size; i++) {\r\n    minColVal = minColVal.clear();\r\n    for (let j = 0; j < costs.size; j++) {\r\n      minColVal = minColVal.push(costs.get(j)!.get(i)!);\r\n    }\r\n\r\n    minColVal = minColVal.sort((a, b) => a - b);\r\n    colPenality = colPenality.push(minColVal.get(1)! - minColVal.get(0)!);\r\n  }\r\n\r\n  return List([rowPenality, colPenality]);\r\n}\r\n\r\n/// A recursive function to solve the transport method (Vogel)\r\nfunction recurseVogel(\r\n  costs: List<List<number>>,\r\n  necessity: List<number>,\r\n  availability: List<number>,\r\n  result: List<List<number>>\r\n): any {\r\n  if (costs.isEmpty() || costs!.get(0)!.isEmpty()) {\r\n    return result;\r\n  }\r\n\r\n  let penalties = penalty(costs);\r\n  let rPenaltyIndex = penalties\r\n    .get(0)!\r\n    .indexOf(Math.max(...penalties.get(0)!.toArray()));\r\n  let cPenaltyIndex = penalties\r\n    .get(1)!\r\n    .indexOf(Math.max(...penalties.get(1)!.toArray()));\r\n  let rowPenalty = penalties.get(0)!.get(rPenaltyIndex)!;\r\n  let colPenalty = penalties.get(1)!.get(cPenaltyIndex)!;\r\n\r\n  if (colPenalty > rowPenalty) {\r\n    let tmp = List();\r\n    for (let i = 0; i < costs.size; i++) {\r\n      tmp = tmp.push(costs.get(i)!.get(cPenaltyIndex));\r\n    }\r\n\r\n    let popIndex = tmp.indexOf(Math.min(...tmp!.toArray()));\r\n    let posValue: number = tmp.get(popIndex);\r\n    let need = necessity.get(popIndex)!;\r\n    let avaliable = availability.get(popIndex)!;\r\n    let minValue = Math.min(need, avaliable);\r\n\r\n    result = result.push(List([posValue, minValue]));\r\n    availability = availability.set(cPenaltyIndex, avaliable - minValue);\r\n    necessity = necessity.set(popIndex, need - minValue);\r\n\r\n    if (avaliable - minValue === 0) {\r\n      costs = costs.map(x => x.delete(cPenaltyIndex));\r\n      availability = availability.delete(cPenaltyIndex);\r\n    }\r\n\r\n    if (need - minValue === 0) {\r\n      costs = costs.delete(popIndex);\r\n      necessity = necessity.delete(popIndex);\r\n    }\r\n\r\n    console.log(\"popIndex\", popIndex);\r\n    console.log(\"penaltyIndex\", cPenaltyIndex);\r\n  } else {\r\n    let popIndex = costs\r\n      .get(rPenaltyIndex)!\r\n      .indexOf(Math.min(...costs.get(rPenaltyIndex)!.toArray()));\r\n\r\n    let posValue: number = Math.min(...costs.get(rPenaltyIndex)!.toArray());\r\n    let need = necessity.get(rPenaltyIndex)!;\r\n    let avaliable = availability.get(popIndex)!;\r\n    let minValue = Math.min(need, avaliable);\r\n\r\n    result = result.push(List([posValue, minValue]));\r\n    availability = availability.set(popIndex, avaliable - minValue);\r\n    necessity = necessity.set(rPenaltyIndex, need - minValue);\r\n\r\n    if (avaliable - minValue === 0) {\r\n      costs = costs.map(x => x.delete(popIndex));\r\n      availability = availability.delete(popIndex);\r\n    }\r\n\r\n    console.log(\"popIndex\", popIndex);\r\n    console.log(\"penaltyIndex\", rPenaltyIndex);\r\n    if (need - minValue === 0) {\r\n      costs = costs.delete(rPenaltyIndex);\r\n      necessity = necessity.delete(rPenaltyIndex);\r\n    }\r\n  }\r\n\r\n  return recurseVogel(costs, necessity, availability, result);\r\n}\r\n\r\n/// A method to start the recursive solve vogel method\r\nfunction solveVogel(\r\n  costs: List<List<number>>,\r\n  necessity: List<number>,\r\n  availability: List<number>\r\n) {\r\n  let result = List();\r\n  return recurseVogel(costs, necessity, availability, result);\r\n}\r\n","import React from \"react\";\r\nimport { Table } from \"bloomer\";\r\n\r\nexport default function VogelResult({\r\n  result,\r\n  final\r\n}: {\r\n  result: number[][][];\r\n  final: number;\r\n}) {\r\n  let list = [];\r\n  for (let i = 0; i < result.length; i++) {\r\n    for (let j = 0; j < result[i].length; j++) {\r\n      list.push(\r\n        <>\r\n          <td>\r\n            {result[i][j][0] + \"\\u{000BB}\"}\r\n\r\n            {\"O\" +\r\n              (result[i][j][1] + 1) +\r\n              \"\\u{02192}\" +\r\n              \"T\" +\r\n              (result[i][j][2] + 1)}\r\n          </td>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Table isBordered isStriped isNarrow>\r\n      <tr>\r\n        {list} <td>={final}</td>\r\n      </tr>\r\n    </Table>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Columns,\r\n  Column,\r\n  Title,\r\n  Field,\r\n  Label,\r\n  Control,\r\n  Input\r\n} from \"bloomer\";\r\nimport { List } from \"immutable\";\r\n\r\nimport \"bulma/css/bulma.css\";\r\nimport \"../App.css\";\r\nimport InputTable from \"../components/inputTable\";\r\nimport vogel from \"../utils/vogel\";\r\nimport VogelResult from \"../components/vogelResult\";\r\n\r\nexport default function Home() {\r\n  const [columns, setColumns] = useState(3);\r\n  const [rows, setRows] = useState(3);\r\n  const [matrix, setMatrix] = useState();\r\n  const [vogelResult, setVogelResult] = useState([[]]);\r\n  const [final, setFinal] = useState(0);\r\n\r\n  //console.log(vogel());\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Columns>\r\n        <Column isSize={3}>\r\n          <Title>Vogel</Title>\r\n          <Field>\r\n            <Label>Target</Label>\r\n            <Control>\r\n              <Input\r\n                value={columns}\r\n                onChange={(e: any) => {\r\n                  setColumns(Number(e.target.value));\r\n                }}\r\n                type=\"number\"\r\n              />\r\n            </Control>\r\n          </Field>\r\n          <Field>\r\n            <Label>Origin</Label>\r\n            <Control>\r\n              <Input\r\n                value={rows}\r\n                onChange={(e: any) => {\r\n                  setRows(Number(e.target.value));\r\n                }}\r\n                type=\"number\"\r\n              />\r\n            </Control>\r\n          </Field>\r\n        </Column>\r\n        <Column>\r\n          <div className=\"App-header\">\r\n            <Columns>\r\n              <Column>\r\n                <InputTable handler={setMatrix} rows={rows} columns={columns} />\r\n              </Column>\r\n            </Columns>\r\n            <Columns>\r\n              <Column>\r\n                <Button\r\n                  onClick={() => {\r\n                    let input = List();\r\n                    let aval: List<number> = List();\r\n                    let nece: List<number> = List();\r\n                    let count = 0;\r\n                    for (let i = 0; i < rows; i++) {\r\n                      let tmp = [];\r\n                      for (let j = 0; j < columns; j++) {\r\n                        tmp.push(parseInt(matrix[count++]));\r\n                      }\r\n                      nece = nece.push(parseInt(matrix[count++]));\r\n                      input = input.push(List(tmp));\r\n                    }\r\n                    for (let j = 0; j < columns; j++) {\r\n                      aval = aval.push(parseInt(matrix[count++]));\r\n                    }\r\n                    let steps = vogel(input, nece, aval);\r\n                    let reduced = steps.map((x: any) => {\r\n                      return x.get(0) * x.get(1);\r\n                    });\r\n                    let values = steps.map((x: any) => x.get(0));\r\n                    console.log(values.toJS());\r\n\r\n                    reduced = reduced.filter(x => x < 999999);\r\n\r\n                    let result: number = reduced.reduce(\r\n                      (x: number, y: number) => x + y,\r\n                      0\r\n                    );\r\n                    setFinal(result);\r\n                    values.pop();\r\n                    let pos = List(\r\n                      input.map((x, i) => {\r\n                        let n: any = List();\r\n                        values.forEach((p, j) => {\r\n                          if (x.indexOf(p) > -1) {\r\n                            n = n.push([reduced.get(j), i, x.indexOf(p)]);\r\n                          }\r\n                        });\r\n                        return n;\r\n                      })\r\n                    );\r\n\r\n                    setVogelResult(pos.toJS());\r\n                    console.log(pos.toJS());\r\n                  }}\r\n                >\r\n                  Go\r\n                </Button>\r\n              </Column>\r\n            </Columns>\r\n            <Columns>\r\n              <Column>\r\n                {vogelResult.length > 0 ? (\r\n                  <VogelResult result={vogelResult} final={final} />\r\n                ) : null}\r\n              </Column>\r\n            </Columns>\r\n          </div>\r\n        </Column>\r\n      </Columns>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Home from \"./containers/home\";\r\n\r\nconst App: React.FC = () => {\r\n  return <Home />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}